#
# Modified K&R
#

indent_with_tabs                = 0             # spaces only
input_tab_size                  = 8             # original tab size
output_tab_size                 = 8             # new tab size
indent_columns                  = 4             #
indent_label                    = 1             # label: always at left

nl_enum_brace                   = remove        # "enum {" vs "enum \n {"
nl_union_brace                  = remove        # "union {" vs "union \n {"
nl_struct_brace                 = remove        # "struct {" vs "struct \n {"
nl_do_brace                     = remove        # "do {" vs "do \n {"
nl_if_brace                     = remove        # "if () {" vs "if () \n {"
nl_for_brace                    = remove        # "for () {" vs "for () \n {"
nl_else_brace                   = remove        # "else {" vs "else \n {"
nl_while_brace                  = remove        # "while () {" vs "while () \n {"
nl_switch_brace                 = remove        # "switch () {" vs "switch () \n {"
nl_fcall_brace                  = add           # "foo() {" vs "foo()\n{"
nl_fdef_brace                   = add           # "int foo() {" vs "int foo()\n{"
nl_brace_while                  = remove
nl_brace_else                   = remove
nl_squeeze_ifdef                = TRUE
nl_func_var_def_blk             = 1             # nl after variable definition block after "int foo() {"
#nl_var_def_blk_end              = 2             # nl after variable definition block after "{"
nl_func_type_name               = add           # int main() -> int\nmain()

mod_paren_on_return             = add           # "return 1;" vs "return (1);"
mod_full_brace_if               = add           # "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_for              = add           # "for () a--;" vs "for () { a--; }"
mod_full_brace_do               = add           # "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while            = add           # "while (a) a--;" vs "while (a) { a--; }"

sp_before_semi                  = remove
sp_paren_paren                  = remove        # space between (( and ))
sp_return_paren                 = remove        # "return (1);" vs "return(1);"
sp_sizeof_paren                 = remove        # "sizeof (int)" vs "sizeof(int)"
sp_before_sparen                = remove        # "if (" vs "if("
sp_after_sparen                 = force         # "if () {" vs "if (){"
sp_after_cast                   = remove        # "(int) a" vs "(int)a"
sp_inside_braces                = force         # "{ 1 }" vs "{1}"
sp_inside_braces_struct         = force         # "{ 1 }" vs "{1}"
sp_inside_braces_enum           = force         # "{ 1 }" vs "{1}"
sp_inside_paren                 = remove        # "( 1 )" vs "(1)"
sp_inside_fparen                = remove        # "( 1 )" vs "(1)" - functions
sp_inside_sparen                = remove        # "( 1 )" vs "(1)" - if/for/etc
sp_assign                       = force
sp_arith                        = force
sp_bool                         = force
sp_compare                      = force
sp_after_comma                  = force
sp_func_def_paren               = remove        # "int foo (){" vs "int foo(){"
sp_func_call_paren              = remove        # "foo (" vs "foo("
sp_func_proto_paren             = remove        # "int foo ();" vs "int foo();"
sp_after_ptr_star               = remove        # char * t; -> char *t;
sp_between_ptr_star             = remove
sp_else_brace                   = add           # else {
sp_brace_else                   = add           # } else

align_assign_span               = 1
align_var_struct_span           = 1
align_with_tabs                 = FALSE         # use tabs to align
align_var_def_gap               = 2             # int[  ]t;
align_var_def_span              = 1             # align variables
align_var_def_star_style        = 2

pp_space                        = add
pp_space_count                  = 1

eat_blanks_after_open_brace     = TRUE          # Remove nl after {
eat_blanks_before_close_brace   = TRUE          # Remove nl before }
